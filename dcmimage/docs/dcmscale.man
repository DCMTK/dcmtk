/*!

\if MANPAGES
\page dcmscale Scale DICOM images
\else
\page dcmscale dcmscale: Scale DICOM images
\endif

\section dcmscale_synopsis SYNOPSIS

\verbatim
dcmscale [options] dcmfile-in dcmfile-out
\endverbatim

\section dcmscale_description DESCRIPTION

The \b dcmscale utility reads a DICOM image, scales it according to the
command line settings and writes back the DICOM image.  This utility only
supports uncompressed and RLE compressed DICOM images.

\section dcmscale_parameters PARAMETERS

\verbatim
dcmfile-in   DICOM input filename to be scaled

dcmfile-out  DICOM output filename to be written
\endverbatim

\section dcmscale_options OPTIONS

\subsection dcmscale_general_options general options
\verbatim
  -h    --help
          print this help text and exit

        --version
          print version information and exit

        --arguments
          print expanded command line arguments

  -q    --quiet
          quiet mode, print no warnings and errors

  -v    --verbose
          verbose mode, print processing details

  -d    --debug
          debug mode, print debug information

  -ll   --log-level  [l]evel: string constant
          (fatal, error, warn, info, debug, trace)
          use level l for the logger

  -lc   --log-config  [f]ilename: string
          use config file f for the logger
\endverbatim

\subsection dcmscale_input_options input options
\verbatim
input file format:

  +f    --read-file
          read file format or data set (default)

  +fo   --read-file-only
          read file format only

  -f    --read-dataset
          read data set without file meta information

input transfer syntax:

  -t=   --read-xfer-auto
          use TS recognition (default)

  -td   --read-xfer-detect
          ignore TS specified in the file meta header

  -te   --read-xfer-little
          read with explicit VR little endian TS

  -tb   --read-xfer-big
          read with explicit VR big endian TS

  -ti   --read-xfer-implicit
          read with implicit VR little endian TS
\endverbatim

\subsection dcmscale_processing_options image processing and encoding options
\verbatim
scaling:

  +a    --recognize-aspect
          recognize pixel aspect ratio when scaling (default)

  -a    --ignore-aspect
          ignore pixel aspect ratio when scaling

  +i    --interpolate  [n]umber of algorithm: integer
          use interpolation when scaling (1..4, default: 1)

  -i    --no-interpolation
          no interpolation when scaling

  -S    --no-scaling
          no scaling, ignore pixel aspect ratio (default)

  +Sxf  --scale-x-factor  [f]actor: float
          scale x axis by factor, auto-compute y axis

  +Syf  --scale-y-factor  [f]actor: float
          scale y axis by factor, auto-compute x axis

  +Sxv  --scale-x-size  [n]umber: integer
          scale x axis to n pixels, auto-compute y axis

  +Syv  --scale-y-size  [n]umber: integer
          scale y axis to n pixels, auto-compute x axis

other transformations:

  +C    --clip-region  [l]eft [t]op [w]idth [h]eight: integer
          clip rectangular image region (l, t, w, h)

SOP Instance UID:

  +ua   --uid-always
          always assign new SOP Instance UID (default)

  +un   --uid-never
          never assign new SOP Instance UID
\endverbatim

\subsection dcmscale_output_options output options
\verbatim
output file format:

  +F    --write-file
          write file format (default)

  -F    --write-dataset
          write data set without file meta information

output transfer syntax:

  +t=   --write-xfer-same
          write with same TS as input (default)

  +te   --write-xfer-little
          write with explicit VR little endian TS

  +tb   --write-xfer-big
          write with explicit VR big endian TS

  +ti   --write-xfer-implicit
          write with implicit VR little endian TS

post-1993 value representations:

  +u    --enable-new-vr
          enable support for new VRs (UN/UT) (default)

  -u    --disable-new-vr
          disable support for new VRs, convert to OB

group length encoding:

  +g=   --group-length-recalc
          recalculate group lengths if present (default)

  +g    --group-length-create
          always write with group length elements

  -g    --group-length-remove
          always write without group length elements

length encoding in sequences and items:

  +e    --length-explicit
          write with explicit lengths (default)

  -e    --length-undefined
          write with undefined lengths

data set trailing padding (not with --write-dataset):

  -p=   --padding-retain
          do not change padding
          (default if not --write-dataset)

  -p    --padding-off
          no padding (implicit if --write-dataset)

  +p    --padding-create  [f]ile-pad [i]tem-pad: integer
          align file on multiple of f bytes and items on
          multiple of i bytes
\endverbatim

\section dcmscale_notes NOTES

The following preferred interpolation algorithms can be selected using the
\e --interpolate option:

\li 1 = free scaling algorithm with interpolation from pbmplus toolkit
\li 2 = free scaling algorithm with interpolation from c't magazine
\li 3 = magnification algorithm with bilinear interpolation from Eduard Stanescu
\li 4 = magnification algorithm with bicubic interpolation from Eduard Stanescu

\section dcmscale_logging LOGGING

The level of logging output of the various command line tools and underlying
libraries can be specified by the user.  By default, only errors and warnings
are written to the standard error stream.  Using option \e --verbose also
informational messages like processing details are reported.  Option
\e --debug can be used to get more details on the internal activity, e.g. for
debugging purposes.  Other logging levels can be selected using option
\e --log-level.  In \e --quiet mode only fatal errors are reported.  In such
very severe error events, the application will usually terminate.  For more
details on the different logging levels, see documentation of module "oflog".

In case the logging output should be written to file (optionally with logfile
rotation), to syslog (Unix) or the event log (Windows) option \e --log-config
can be used.  This configuration file also allows for directing only certain
messages to a particular output stream and for filtering certain messages
based on the module or application where they are generated.  An example
configuration file is provided in <em>\<etcdir\>/logger.cfg</em>.

\section dcmscale_command_line COMMAND LINE

All command line tools use the following notation for parameters: square
brackets enclose optional values (0-1), three trailing dots indicate that
multiple values are allowed (1-n), a combination of both means 0 to n values.

Command line options are distinguished from parameters by a leading '+' or '-'
sign, respectively.  Usually, order and position of command line options are
arbitrary (i.e. they can appear anywhere).  However, if options are mutually
exclusive the rightmost appearance is used.  This behavior conforms to the
standard evaluation rules of common Unix shells.

In addition, one or more command files can be specified using an '@' sign as a
prefix to the filename (e.g. <em>\@command.txt</em>).  Such a command argument
is replaced by the content of the corresponding text file (multiple
whitespaces are treated as a single separator unless they appear between two
quotation marks) prior to any further evaluation.  Please note that a command
file cannot contain another command file.  This simple but effective approach
allows one to summarize common combinations of options/parameters and avoids
longish and confusing command lines (an example is provided in file
<em>\<datadir\>/dumppat.txt</em>).

\section dcmscale_environment ENVIRONMENT

The \b dcmscale utility will attempt to load DICOM data dictionaries specified
in the \e DCMDICTPATH environment variable.  By default, i.e. if the
\e DCMDICTPATH environment variable is not set, the file
<em>\<datadir\>/dicom.dic</em> will be loaded unless the dictionary is built
into the application (default for Windows).

The default behavior should be preferred and the \e DCMDICTPATH environment
variable only used when alternative data dictionaries are required.  The
\e DCMDICTPATH environment variable has the same format as the Unix shell
\e PATH variable in that a colon (":") separates entries.  On Windows systems,
a semicolon (";") is used as a separator.  The data dictionary code will
attempt to load each file specified in the \e DCMDICTPATH environment variable.
It is an error if no data dictionary can be loaded.

\section dcmscale_copyright COPYRIGHT

Copyright (C) 2002-2020 by OFFIS e.V., Escherweg 2, 26121 Oldenburg, Germany.

*/
