.TH "findscu" 1 "Thu Jan 14 2021" "Version 3.6.6" "OFFIS DCMTK" \" -*- nroff -*-
.nh
.SH NAME
findscu \- DICOM query (C-FIND) SCU

.SH "SYNOPSIS"
.PP
.PP
.nf
findscu [options] peer port [dcmfile-in...]
.fi
.PP
.SH "DESCRIPTION"
.PP
The \fBfindscu\fP application implements an SCU for the Query/Retrieve Service Class and the Basic Worklist Management Service Class\&. \fBfindscu\fP only supports query functionality using the C-FIND message\&. It sends query keys to an SCP and awaits responses\&. The application can be used to test SCPs of the Query/Retrieve and Basic Worklist Management Service Classes\&.
.SH "PARAMETERS"
.PP
.PP
.nf
peer        hostname of DICOM peer

port        tcp/ip port number of peer

dcmfile-in  DICOM query file(s)
.fi
.PP
.SH "OPTIONS"
.PP
.SS "general options"
.PP
.nf
  -h    --help
          print this help text and exit

        --version
          print version information and exit

        --arguments
          print expanded command line arguments

  -q    --quiet
          quiet mode, print no warnings and errors

  -v    --verbose
          verbose mode, print processing details

  -d    --debug
          debug mode, print debug information

  -ll   --log-level  [l]evel: string constant
          (fatal, error, warn, info, debug, trace)
          use level l for the logger

  -lc   --log-config  [f]ilename: string
          use config file f for the logger
.fi
.PP
.SS "network options"
.PP
.nf
override matching keys:

  -k    --key  [k]ey: gggg,eeee="str", path or dictionary name="str"
          override matching key

query information model:

  -W    --worklist
          use modality worklist information model (default)

  -P    --patient
          use patient root information model

  -S    --study
          use study root information model

  -O    --psonly
          use patient/study only information model

application entity titles:

  -aet  --aetitle  [a]etitle: string
          set my calling AE title (default: FINDSCU)

  -aec  --call  [a]etitle: string
          set called AE title of peer (default: ANY-SCP)

post-1993 value representations:

  +u    --enable-new-vr
          enable support for new VRs (UN/UT) (default)

  -u    --disable-new-vr
          disable support for new VRs, convert to OB

proposed transmission transfer syntaxes:

  -x=   --propose-uncompr
          propose all uncompressed TS, explicit VR
          with local byte ordering first (default)

  -xe   --propose-little
          propose all uncompressed TS, explicit VR
          little endian first

  -xb   --propose-big
          propose all uncompressed TS, explicit VR
          big endian first

  -xd   --propose-deflated
          propose deflated explicit VR little endian TS
          and all uncompressed transfer syntaxes

  -xi   --propose-implicit
          propose implicit VR little endian TS only

deflate compression level (only with --propose-deflated):

  +cl   --compression-level  [l]evel: integer (default: 6)
          0=uncompressed, 1=fastest, 9=best compression

other network options:

  -to   --timeout  [s]econds: integer (default: unlimited)
          timeout for connection requests

  -ts   --socket-timeout  [s]econds: integer (default: 60)
          timeout for network socket (0 for none)

  -ta   --acse-timeout  [s]econds: integer (default: 30)
          timeout for ACSE messages

  -td   --dimse-timeout  [s]econds: integer (default: unlimited)
          timeout for DIMSE messages

  -pdu  --max-pdu  [n]umber of bytes: integer (4096..131072)
          set max receive pdu to n bytes (default: 16384)

        --repeat  [n]umber: integer
          repeat n times

        --abort
          abort association instead of releasing it

        --cancel  [n]umber: integer
          cancel after n responses (default: never)
.fi
.PP
.SS "transport layer security (TLS) options"
.PP
.nf
transport protocol stack:

  -tls  --disable-tls
          use normal TCP/IP connection (default)

  +tls  --enable-tls  [p]rivate key file, [c]ertificate file: string
          use authenticated secure TLS connection

  +tla  --anonymous-tls
          use secure TLS connection without certificate

private key password (only with --enable-tls):

  +ps   --std-passwd
          prompt user to type password on stdin (default)

  +pw   --use-passwd  [p]assword: string
          use specified password

  -pw   --null-passwd
          use empty string as password

key and certificate file format:

  -pem  --pem-keys
          read keys and certificates as PEM file (default)

  -der  --der-keys
          read keys and certificates as DER file

certification authority:

  +cf   --add-cert-file  [f]ilename: string
          add certificate file to list of certificates

  +cd   --add-cert-dir  [d]irectory: string
          add certificates in d to list of certificates

security profile:

  +px   --profile-bcp195
          BCP 195 TLS Profile (default)

  +py   --profile-bcp195-nd
          Non-downgrading BCP 195 TLS Profile

  +pz   --profile-bcp195-ex
          Extended BCP 195 TLS Profile

  +pb   --profile-basic
          Basic TLS Secure Transport Connection Profile (retired)

  +pa   --profile-aes
          AES TLS Secure Transport Connection Profile (retired)

  +pn   --profile-null
          Authenticated unencrypted communication
          (retired, was used in IHE ATNA)

ciphersuite:

  +cc   --list-ciphers
          show list of supported TLS ciphersuites and exit

  +cs   --cipher  [c]iphersuite name: string
          add ciphersuite to list of negotiated suites

pseudo random generator:

  +rs   --seed  [f]ilename: string
          seed random generator with contents of f

  +ws   --write-seed
          write back modified seed (only with --seed)

  +wf   --write-seed-file  [f]ilename: string (only with --seed)
          write modified seed to file f

peer authentication:

  -rc   --require-peer-cert
          verify peer certificate, fail if absent (default)

  -ic   --ignore-peer-cert
          don't verify peer certificate
.fi
.PP
.SS "output options"
.PP
.nf
general:

  -od   --output-directory  [d]irectory: string (default: ".")
          write output files to existing directory d

automatic data correction:

  +dc   --enable-correction
          enable automatic data correction

  -dc   --disable-correction
          disable automatic data correction (default)

C-FIND responses:

  +sr   --show-responses
          always output responses to the logger

  -sr   --hide-responses
          do not output responses to the logger

  -X    --extract
          extract responses to DICOM file (rsp0001.dcm...)

  -Xx   --extract-xml
          extract responses to XML file (rsp0001.xml...)

  -Xs   --extract-xml-single  [f]ilename: string
          extract all responses to given XML file f

  -Xlo  --limit-output  [n]umber: integer
          limit number of responses extracted to file to n
          (default: unlimited)
.fi
.PP
.SH "NOTES"
.PP
Each file supplied on the command line will be sent to the SCP as part of a C-FIND request\&. The query file must be a valid DICOM data set containing the dataset part of a C-FIND-RQ message\&. The query file could, for instance, be created with the \fBdump2dcm\fP utility from a script like the following example:
.PP
.PP
.nf
# query patient names and IDs
(0008,0052) CS [PATIENT]     # QueryRetrieveLevel
(0010,0010) PN []            # PatientName
(0010,0020) LO []            # PatientID
.fi
.PP
.PP
Individual attributes of each file sent can be modified or supplemented using the \fI-k\fP option\&. For example the command:
.PP
.PP
.nf
findscu -P -k "(0010,0010)=HEWETT*" caesar 5678 patqry.dcm
.fi
.PP
.PP
will, when sent to the SCP caesar at TCP/IP port 5678, cause any PatientName attribute in patqry\&.dcm to have the value 'HEWETT*'\&. If such an attribute is present it will be replaced, if absent it will be inserted\&. The \fI-k\fP option can be present more than once\&. The value part (after the '=') may be absent causing the attribute to be sent with zero length\&.
.PP
In earlier versions of \fBfindscu\fP, the tag keys were specified without braces around group and element number, e\&. g\&. '0010,0010' instead of '(0010,0010)'\&. It is recommended switching to the new syntax; however, the old syntax is still working\&.
.PP
Also \fI-k\fP accepts dictionary names instead of element tags for specifying DICOM elements\&. For example, the \fBfindscu\fP call above then reads like this:
.PP
.PP
.nf
findscu -P -k PatientName="HEWETT*" caesar 5678 patqry.dcm
.fi
.PP
.PP
It is also possible to specify sequences, items and nested attributes using the \fI-k\fP option\&. In these cases, a special 'path' notation has to be used, e\&. g\&.
.PP
.PP
.nf
findscu -W -k "(0040,0100)[0].Modality=CT" caesar 5678
.fi
.PP
.PP
This call queries a worklist server at host caesar for any planned procedures for CT modalities by specifying tag (0040,0100) 'Scheduled Procedure Step
Sequence' and an attribute 'Modality' in the first item of this sequence with value 'CT'\&. Details on this path notation can be found in the documentation of \fBdcmodify\fP\&.
.PP
If no file is specified on the command line, the query must be specified completely with one or more \fI-k\fP options\&. If multiple query files are provided, \fBfindscu\fP will send multiple C-FIND requests to the SCP\&.
.PP
Each set of response identifiers received will be output to the logger unless option \fI--hide-responses\fP, any of the below \fI--extract\fP variants, \fI--quiet\fP or an appropriate logger configuration is used\&. In such cases, the output to the logger can be enforced with option \fI--show-responses\fP\&.
.PP
In addition, the response datasets can also be extracted as individual DICOM files (using option \fI--extract\fP) or XML files (using option \fI--extract-xml\fP)\&. The output format of the latter is described by the file \fIdcm2xml\&.dtd\fP (starting with top-level element 'data-set')\&. For XML files, the Specific Character Set is mapped automatically to an appropriate XML encoding\&. If this is not possible, e\&.g\&. in case of ISO 2022 character sets, non-ASCII characters and those below #32 are stored as '&#nnn;' where 'nnn' refers to the numeric character code\&. Please note that this might lead to invalid character entity references (such as '&#27;' for ESC) and will cause most XML parsers to reject the document\&.
.PP
Alternatively, all response datasets of an association can be extracted to a single XML file using option \fI--extract-xml-single\fP\&. The top-level element of the XML document is 'responses' (with a 'type' attribute of 'C-FIND')\&. The individual datasets are stored as described above\&. If support for character set conversion is enabled, UTF-8 encoding is used, i\&.e\&. all datasets are converted to UTF-8 encoding (which is strongly recommended in order to avoid issues with non-ASCII characters when different character sets are used)\&.
.SS "DICOM Conformance"
The \fBfindscu\fP application supports the following SOP Classes as an SCU:
.PP
.PP
.nf
FINDPatientRootQueryRetrieveInformationModel       1.2.840.10008.5.1.4.1.2.1.1
FINDStudyRootQueryRetrieveInformationModel         1.2.840.10008.5.1.4.1.2.2.1
FINDPatientStudyOnlyQueryRetrieveInformationModel  1.2.840.10008.5.1.4.1.2.3.1
FINDModalityWorklistInformationModel               1.2.840.10008.5.1.4.31
.fi
.PP
.PP
The \fBfindscu\fP application will propose presentation contexts for one of the abovementioned supported SOP Classes depending on command line options (\fI-P\fP, \fI-S\fP, \fI-O\fP or \fI-W\fP)\&. Basically, the following transfer syntaxes are supported:
.PP
.PP
.nf
LittleEndianImplicitTransferSyntax                 1.2.840.10008.1.2
LittleEndianExplicitTransferSyntax                 1.2.840.10008.1.2.1
DeflatedExplicitVRLittleEndianTransferSyntax       1.2.840.10008.1.2.1.99 (*)
BigEndianExplicitTransferSyntax                    1.2.840.10008.1.2.2
.fi
.PP
.PP
(*) if compiled with zlib support enabled (see \fI--version\fP output)
.PP
Which transfer syntaxes are actually proposed in what order, can be specified with the \fI--propose\fP options\&.
.PP
The \fBfindscu\fP application does not support extended negotiation\&.
.SH "LOGGING"
.PP
The level of logging output of the various command line tools and underlying libraries can be specified by the user\&. By default, only errors and warnings are written to the standard error stream\&. Using option \fI--verbose\fP also informational messages like processing details are reported\&. Option \fI--debug\fP can be used to get more details on the internal activity, e\&.g\&. for debugging purposes\&. Other logging levels can be selected using option \fI--log-level\fP\&. In \fI--quiet\fP mode only fatal errors are reported\&. In such very severe error events, the application will usually terminate\&. For more details on the different logging levels, see documentation of module 'oflog'\&.
.PP
In case the logging output should be written to file (optionally with logfile rotation), to syslog (Unix) or the event log (Windows) option \fI--log-config\fP can be used\&. This configuration file also allows for directing only certain messages to a particular output stream and for filtering certain messages based on the module or application where they are generated\&. An example configuration file is provided in \fI<etcdir>/logger\&.cfg\fP\&.
.SH "COMMAND LINE"
.PP
All command line tools use the following notation for parameters: square brackets enclose optional values (0-1), three trailing dots indicate that multiple values are allowed (1-n), a combination of both means 0 to n values\&.
.PP
Command line options are distinguished from parameters by a leading '+' or '-' sign, respectively\&. Usually, order and position of command line options are arbitrary (i\&.e\&. they can appear anywhere)\&. However, if options are mutually exclusive the rightmost appearance is used\&. This behavior conforms to the standard evaluation rules of common Unix shells\&.
.PP
In addition, one or more command files can be specified using an '@' sign as a prefix to the filename (e\&.g\&. \fI@command\&.txt\fP)\&. Such a command argument is replaced by the content of the corresponding text file (multiple whitespaces are treated as a single separator unless they appear between two quotation marks) prior to any further evaluation\&. Please note that a command file cannot contain another command file\&. This simple but effective approach allows one to summarize common combinations of options/parameters and avoids longish and confusing command lines (an example is provided in file \fI<datadir>/dumppat\&.txt\fP)\&.
.SH "ENVIRONMENT"
.PP
The \fBfindscu\fP utility will attempt to load DICOM data dictionaries specified in the \fIDCMDICTPATH\fP environment variable\&. By default, i\&.e\&. if the \fIDCMDICTPATH\fP environment variable is not set, the file \fI<datadir>/dicom\&.dic\fP will be loaded unless the dictionary is built into the application (default for Windows)\&.
.PP
The default behavior should be preferred and the \fIDCMDICTPATH\fP environment variable only used when alternative data dictionaries are required\&. The \fIDCMDICTPATH\fP environment variable has the same format as the Unix shell \fIPATH\fP variable in that a colon (':') separates entries\&. On Windows systems, a semicolon (';') is used as a separator\&. The data dictionary code will attempt to load each file specified in the \fIDCMDICTPATH\fP environment variable\&. It is an error if no data dictionary can be loaded\&.
.SH "FILES"
.PP
\fI<datadir>/dcm2xml\&.dtd\fP - Document Type Definition (DTD) file
.SH "SEE ALSO"
.PP
\fBmovescu\fP(1), \fBdump2dcm\fP(1), \fBdcmodify\fP(1)
.SH "COPYRIGHT"
.PP
Copyright (C) 1994-2021 e\&.V\&., Escherweg 2, 26121 Oldenburg, Germany\&.
